WEB SERVICE
    
    - Software system designed to support interoperable (not platform dependend)
      machine-to-machine interaction
      over a network.

    - To make the requesr platform independent, we need to make
      the request and response platform independent.

    - Every web service offers Service Definition, thar specifies:
            - request and response format;


KEY TERMINOLIGY:

    - Request is the inout of our service;

    - Response is teh ouptup from a web-service;

    - Message Exchange format - is a format of the request and the response (XML, JSON);

    - Service Provider - the one, which hosts the web-service;

    - Sevice Consumer - the one, who uses the service;

    - Service Definition - is a contract between the service provider and service consumers;

    - Endpoint definew what URL is the service is exposed at.
        - How can these service counsumer call this service which is 
          exposed by the service provider.

    - Transport - defines how a service is called: Internet (HTTP) or MQ

    - MQ - the service requester would place a message in the queue;
         - the service provider would be listening on the queue;
         - And as soon as there is a requset on the queue, it would take the request,
           do the processing of it, create the response and put it back in the queue and 
           the service requseter would get the response from the queue.


SOAP WEB SERVICES:

       -  REST defines an architectual approach;
       -  SOAP exposes restrictions on the format of XML, whih is exchanged between your service provider
          and the service consumer;

       - SOAP - Simple Object Access Protocol, defines a specific way of building web services.

       - SOAP defines a specific XML request and response structure:

                SOAP-ENV: Envelope, contains:

                SOAP-ENV: Header (optional)
                SOAP-ENV: Body

        The header contains meta information like 
        - authentication,
        - authorization,
        - signatures

        The body contains the real content or the request or response.


        - In SOAP service definition is typically done using something called
          Web Service Definition Language (WSDL)

        - WSDL defines the Endpoint, it defines all the operations that are exposed.
        
        - And also it specifies teh request and response structure;


  RESTFUL WEB SERVICES:

      REST - Representational State Transfer

        - HTTP-Response icludes HHTP Status Codes;

        - The most important abstration in the REST is something called a Resource;

        - A resourse has an URI (Uniform Resource Identifier) :
            /user/Ranga/todos/1
            /user/Ranga/todos
            /user/Ranga

        - A resource can have different representations:

            - XML
            - HTML
            - JSON

        - Data Exchange Format:

            - No restriction. JSON is popular

        - Transport:

          - Only HTTP

        - Service Definition:

          - WADL/Swagger



MICROSERVICES

    -  Small autonomous services, that work together  - Sam Newman

    -  In short , the microservices architectural style is an approach to developinga single
       application as a suite of small services, each running in it's own process and communicating 
       with lightweight mechanisms, often an HTTP resource API.

    -  These services are built around business capabilities and independently deployable
       by fully automated deployment machinery
    
    -  There is a bare minimum of centralized management of these services,
       which my be written in different programming languages and use different data storage 
       technologies - James Lewis and Martin Fowler.


    - REST
    - Small Well Chosen Deployable Units
    - Cloud Enabled

    - If there is more load on Microservice, I should be able to easily bring up another instance of this Microservice.


CHALLENGES OF MICROSERVICES:

    1) BOUNDED CONTEXT;

    2) CONFIGURATION MANAGEMENT;

    3) DYNAMIC SCALE UP AND SCALE DOWN;

    4) VISIBILITY; 

    5) PACK OF CARDS;


SPRING CLOUD:

    1)  CONFIGURATION MANAGEMENT  -  Spring Cloud Config Server

          - There would be multiple microservices, multiple environments for each of these 
            microservices and multiple instances in many of those environments.

            => There is a lot of configuration  for these microservices, that's operations team needs to manage.


          - Spring Cloud Config Server provides the approach where you canstore all configuration for all
            the different environments of all the microservices in a Git repository.

    2) DYNAMIC SCALE UP AND DOWN:

           - Naming Server (Eureka)
           - Ribbon (Client Side Local Balancing)
           - Feign (Easier REST Clients)


           - All the instances of all microservices would register with Naming Server;

           Naming Server features:

            - service regisration
            - service discovery

    3) VISIBILITY AND MONITORING:

            - Zipking Distributed Tracing;
            - Netfix API Gateway;

    4) FAULT TOLERANCE:

            - Hystrix



MANAGING CONFIGURATION:

    - All microservices have own configuration;

    - This configuration might be things like database configuration or any external service
      configuration.

    - With Spring Cloud you put all the configurations for your applications in a git repository.
      And SC would take care of managing the configuration and providing it to specific Microservice.



CREATING HARD-CODED SERVICE:

    For Spring Cloud Config Server:

        spring.application.name=spring-cloud-config-server
        server.port=8888


          @Component
          @ConfigurationProperties("limits-service")   - prefix in app.properties
          public class Configuration {
              private int minimum;
              private int maximum;

              public int getMinimum() {
                  return minimum;
              }

              public void setMinimum(int minimum) {
                  this.minimum = minimum;
              }

              public int getMaximum() {
                  return maximum;
              }

              public void setMaximum(int maximum) {
                  this.maximum = maximum;
              }
          }


          @RestController
          public class LimitsConfigurationController {

              @Autowired
              private Configuration configuration;

              @GetMapping("/limits")
              public LimitConfiguration retrieveLimitsFromConfiguration() {

                  return new LimitConfiguration(configuration.getMaximum(), configuration.getMinimum());
              }
          }

          spring.application.name=limits-service

          limits-service.minimum=99
          limits-service.maximum=9999


LOCAL GIT CONFIG WITH PROPERTIES:

    limits-service.minimum=99
    limits-service.maximum=9999


CONFIG SERVER MAIN:

    @EnableConfigServer
    @SpringBootApplication
    public class SpringCloudConfigServerApplication {

      public static void main(String[] args) {
        SpringApplication.run(SpringCloudConfigServerApplication.class, args);
      }

    }

CONFIG SERVER APP PROPERTIES (FOR LOCAL GIT CONFIG):


    spring.application.name=spring-cloud-config-server
    server.port=8888

    spring.cloud.config.server.git.uri=file:///home/whitenoise/git-config/git-localconfig-repo


URL:


      http://localhost:8888/limits-service/default


      - Spring Cloud Config Server stores configuration for multiple serices;



MULTIPLE ENVIRONMENTS:


      - Create few properties-file for every environment

      - Environment properties source have a priority, if there was a value which was inside 
        the default which was not present in QA , then the value from DEFAULT will be picked up.
        But what ever is present in QA has a highest priority.


        - You need to tell LimitsService where the Spring Cloud Config Server is, which
          URL can be used to talk to the SCCS.

          spring.cloud.config.uri=http://localhost:8888

        - Appliction name is the critical part of bootstrap.properties:


                spring.application.name=limits-service
                spring.cloud.config.uri=http://localhost:8888



CONFIGURING PROFILES:


        - We are not configuring anything in Limits Service, all configs come from the
          git repository.

        - All that you need - to set spring profiles active to Dev:

                spring.application.name=limits-service
                spring.cloud.config.uri=http://localhost:8888
                spring.profiles.active=dev


        - You can pass the active profile is through things like VM arguments 


SPRING CLOUD CONFIG SERVER:


      - SCCS related to manage all the configurations related to multiple microservices.

      - Configuring for different environments using SCCS :

          - creating a few property files with specific naming convention int the GIT repository
            and commit them in.
          
          - Then we able to connect the SCCS  to the git repository to be able to serve those configurations;

          - In Microservice instead of application.properties we wold rename the configuration file
            to bootstrap.properties and put the URI for this Spring Cloud Config Server.

          - All the application configuration is in one place - GIT Repository;

          - In basics we need to restart Microservice to pick up changes in the Git Repository;


CURRENCY EXCHANGE SERVICE:


      RestController:


          @RestController
          public class CurrencyExchangeController {

              @GetMapping("/currency-exchange/from/{from}/to/{to}")
              public ExchangeValue retrieveExchangeValue(@PathVariable String from, @PathVariable String to) {
                  return new ExchangeValue(1000L, from, to, BigDecimal.valueOf(65));
              }
          }


SETTING UP DYNAMIC PORT IN THE RESPONSE:


      -Create  another configuration and set in Environment VM options - -Dserver.port=8001


      Controller with dynamic port from environment and sending port in response:


        @RestController
        public class CurrencyExchangeController {

            @Autowired
            private Environment environment;

            @GetMapping("/currency-exchange/from/{from}/to/{to}")
            public ExchangeValue retrieveExchangeValue(
                    @PathVariable String from, @PathVariable String to) {

              ExchangeValue exhangeValue =
                      new ExchangeValue(1000L, from, to, BigDecimal.valueOf(65));
              exhangeValue.setPort(
                      Integer.parseInt(environment.getProperty("local.server.port")));

              return exhangeValue;
            }
        }



CONFIGURING JPA  AND INITIALIZING DATA:


      	<dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
        </dependency>


JpaREPOSITORY:

       public interface ExchangeValueRepository extends
                JpaRepository<ExchangeValue,Long> {

            ExchangeValue findByFromAndTo(String from, String to);
        }

       


        RestController with JPA:


          @RestController
          public class CurrencyExchangeController {

              @Autowired
              private Environment environment;

              @Autowired
              ExchangeValueRepository repository;

              @GetMapping("/currency-exchange/from/{from}/to/{to}")
              public ExchangeValue retrieveExchangeValue(
                      @PathVariable String from, @PathVariable String to) {

                  ExchangeValue exhangeValue = repository.findByFromAndTo(from,to);

                  exhangeValue.setPort(
                        Integer.parseInt(environment.getProperty("local.server.port")));

                return exhangeValue;
              }
          }
MAIN WITH POSTCONSTRUCT DATA INITIALIZING:


        @SpringBootApplication
        public class CurrencyExchangeServiceApplication {


            @PostConstruct
            @Bean(initMethod = "initData")
            public DataInitializer init() {
              return new DataInitializer();
            }

          public static void main(String[] args) {
            SpringApplication.run(CurrencyExchangeServiceApplication.class, args);
          }

          @Bean(initMethod = "start", destroyMethod = "stop")
          public Server h2Server() throws SQLException {
            return Server.createTcpServer("-tcp", "-tcpAllowOthers", "-tcpPort", "9092");
          }
        }

      


REST TEMPLATE:

      - We need to map the response which is coming back to an entity and we would want to send a get
        request:


        Controller:



            @RestController
            public class CurrencyConversionController {
                @GetMapping("currency-converter/from/{from}/to/{to}/quantity/{quantity}")
                public CurrencyConversionBean convertCurrency(@PathVariable String from,
                                                              @PathVariable String to,
                                                              @PathVariable BigDecimal quantity) {

                    Map<String, String> uriVariables = new HashMap<>();
                    uriVariables.put("from",from);
                    uriVariables.put("to",to);


                    ResponseEntity<CurrencyConversionBean> responseEntity =
                            new RestTemplate().getForEntity(
                                    "http://localhost:8000/currency-exchange/from/{from}/to/{to}",
                                        CurrencyConversionBean.class, uriVariables);

                    CurrencyConversionBean response = responseEntity.getBody();

                    return new CurrencyConversionBean(response.getId(), from, to, response.getConversionMultiple(),
                            quantity,quantity.multiply(response.getConversionMultiple()),response.getPort());

                }
            }



FEINGN:


    - Feign makes easy to invoke other microservices, other RESTFul

    - Feign provides integration with Ribbon - client-side 
      load-balancing framework.

      MVN - dependency:

          <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
            <version>1.4.7.RELEASE</version>
        </dependency>


      @SpringBootApplication
      @EnableFeignClients("com.outspace.miroservices.currencyconversionservice")     
      
             - enables feign to scan for clients

             - We need to create a Fighn Proxy to be able to talk to a external Microservice.


      FEIGN PROXY INTERFACE:


            @FeignClient(name = "currency-exchange-service", url = "localhost:8000")
            public interface CurrencyExchangeServiceProxy {

                @GetMapping("/currency-exchange/from/{from}/to/{to}")
                public CurrencyConversionBean retrieveExchangeValue(
                        @PathVariable("from") String from, @PathVariable("to") String to);
            }


      CONTROLLER METHOD:


            @GetMapping("currency-converter-feign/from/{from}/to/{to}/quantity/{quantity}")
            public CurrencyConversionBean convertCurrencyFeign(@PathVariable String from,
                                                          @PathVariable String to,
                                                          @PathVariable BigDecimal quantity) {

                CurrencyConversionBean response = proxy.retrieveExchangeValue(from, to);

                return new CurrencyConversionBean(response.getId(), from, to, response.getConversionMultiple(),
                        quantity,quantity.multiply(response.getConversionMultiple()),response.getPort());

            }



      - With Feign - all the we would need to do is to define a simple proxy,
        we defined a CurrencyExhangeServiceProxy and we define a simple method on it.
      - And we we able to use that proxy to make the calls of this service.
      - Feign helps to simplify the client code to talk a RESTFul web service.

      - You don't need to know that CurrencyExchangeService is a RESTFul service.
      - You just talk to the proxy and yoa are not worried about how the proxy is 
        getting details from the service.


  
CLIENT SIDE LOAD BALANCING - RIBBON:


        <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </dependency>

      - We don't want to talk to one particular instance, but we would want to distribute the load between multiple 
        instances of the CurrencyExchangeService.


        currency-exchange-service.ribbon.listOfServers=http://localhost:8000, http://localhost:8001



EUREKA NAMING SERVER:  


      - We would need to be able to dynamically increse or decrease teh currency exchange services or 
        decrease them if.

      - All he instances of all microservices would register with the Naming Server;

      - Whenever an instance of a Microservice comes up, it would be register itself
        in Eureka Naming Server   - this called SERVICE REGISTRATION.

      - An whenever a sevice wants to talk to another service let's said the currency calculation
        service wants to talk to the currency exchange service, what would  do:

        It would talk to the Name Server - what are instances of the currency exchange service that
        are currently running. This is called SERVICE DISCOVERY.

        - So, the currency calculation Service is asking for the location of the currency exchange services
          the instances 



      Starters:   eureka server, config-client, dev-tools, actuator

      application.properties:

          spring.application.name=netflix-eureka-naming-server
          server.port=8761

          eureka.client.register-with-eureka=false
          eureka.client.fetch-registry=false

      main annotation:

          @EnableEurekaServer


      - To connect CurrencyConversionService to Eureka, we need to add the dependency:


            <dependency>
              <groupId>org.springframework.cloud</groupId>
              <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            </dependency>

           -  Add @EnableDiscoveryClient   annotation in Main-class

           -  eureka.client.service-url.default-zone=http://localhost:8761/eureka   - in application.properties 

           - Then in Eureka-Web-Interface you can see that CurrencyConversionService is registered with it
             and an instance is running on 8100



DISTRIBUTED CALLS USING EUREKA AND RIBBON:

      - When the currency calculation service invokes  currency exchange service, we'll use 
        the Naming Server  to find the details of the currency exchange service.

      - So, what we would want to do is instead of hard-coding the URL for Ribbon, we would want
        Ribbon to talk to the Naming Server and retrieve the details of all the instances of this services.

      - The important thing is that without configuring the URL of the CurrencyExchangeService,
        we are able to get the currency calculation service to talk to CurrencyExchangeService the
        way it is happening is - Ribbon asks the Naming Server - what are the instances of the CurrencyExchangeService.
      
      - And it gets a list back and then it would invoke the appropriate currency exchange service.

      - All the requests to the Currencu Converter would be  distributed among all the currency exchange applications,
        which are running.


      - There are many small services which are talking to each other that we would want to be able
        to bring new instances of them take all the instances down without  causing a problem to any
        of the other consumers.

      - That what we have set up between the currency calculation service and the currency exchange service.

      - And the tools we used to be able to do that:
          - Ribbon
          - Eureka
          - Feign

      - Naming Server is the one, which offers regisration that services and services discovery functionality.

      - Ribbon provides the client side load balancing facilities, so it enables client calculation service
        to distribute the load between multiple service providers

      - And we use Feign to make sure that we write inside the currency calculation service to call
        teh currency exchange service is very simple.




API GATEWAYS:


    - Authentication, authorization and security;
    - Rate limits;
    - Fault Toleration;
    - Service Aggregation;


    - You should want to make sure that every call to every microservice  is authenticated.

    - You also want to implement things like rate limit for the specific client

    - You want all the microservices to be fault tolerant 

    - Let's say there is an external consumer who wants to call 15 different services as a part of
      one process - it is better to aggregate those 15 services and provide one service call for the external consumer. 



SETTING UP ZUUL SERVER:

    - Create a Component for it;

    - Decide  what things  that the Zuul API should do when it intercepts a request;

    - Make sure that all the important requests are configured pass throug the Zuul API Gateway;

    - We'll log any request, that  omes through the gateway;


    shouldFilter() - you can check the request ann see certain things and decide if you want to execute
                     the filter or not.

    filterType()   -  should filer happening before  the request is executed or after the request has executed
                      or only error-requests ( String "pre", "post", "error")


    run()          - here we implement the complete logic


    http://localhost:8000/currency-exchange/from/USD/to/INR

    http://localhost:8765/{application-name}/{uri}


    =>   localhost:8765/currency-exchange-service/currency-exchange/from/USD/to/INR


    - What the API Gateway does - it would log the request because we implemented a logging filter, and 
      it would send the request out to the microservice - CurrencyExchange Microservice.


      LOGGING FILTER:


            @Component
            public class ZuulLoggingFilter extends ZuulFilter {

                private Logger logger = LoggerFactory.getLogger(this.getClass());

                @Override
                public boolean shouldFilter() {
                    return true;
                }

                @Override
                public Object run() throws ZuulException {

                    HttpServletRequest request =
                            RequestContext.getCurrentContext().getRequest();
                    logger.info("request -> {} request uri -> {}", request, request.getRequestURI());

                    return null;
                }

                @Override
                public String filterType() {
                    return "pre";
                }

                @Override
                public int filterOrder() {
                    return 1;
                }
            }



          MAIN CLASS:


                @EnableZuulProxy
                @EnableDiscoveryClient
                @SpringBootApplication
                public class NetflixZuulApiGatewayServerApplication {

                  public static void main(String[] args) {
                    SpringApplication.run(NetflixZuulApiGatewayServerApplication.class, args);
                  }

                }


          APPLICATION PROPERTIES:


              spring.application.name=netflix-zuul-api-gateway-server
              server.port=8765
              eureka.client.service-url.default-zone=http://localhost:8761/eureka

        
        For connection to API GATEWAY we need to say in CurrencyConversionService:
          - ok, do not connect to the currency exchange service, Feign must be connected to Zuul API Proxy


          //@FeignClient(name = "currency-exchange-service")
          @FeignClient(name = "netflix-zuul-api-gateway-server")
          @RibbonClient(name = "currency-exchange-service")
          public interface CurrencyExchangeServiceProxy {

              @GetMapping("/currency-exchange-service/currency-exchange/from/{from}/to/{to}")
              CurrencyConversionBean retrieveExchangeValue(
                      @PathVariable("from") String from, @PathVariable("to") String to);
          }


          Server talk to the Naming Server and get the URI for it;

          - We need to append the name of application which is exposing that service, so would need to append
            in currency exchange service to the URI - in Get Mapping of Proxy;


          - http://localhost:8765/{application-name}/{uri}



        => Whenever you calling CurrencyCalculation service through Feign - this is being routed 
           through API-GATEWAY the service call directly not going to the currency exchange service.
           It is being routed through the gateway. 

           The gateway is executing the filter which is logging filter.
           And invoking the CurrencyExchangeService .

           => It is intercepting the call between the CurrencyCalculationService and CurrencyExchangeService.

           http://localhost:8765/{app-name}/{uri}




DISTRIBUTED TRACING:


          - We need one place, where can we go and see what happened with a specific request;
          - We woud want to have one single centralized location where I can see complete chain of
            happened with a speific request;


SPRING CLOUD SLEUTH WITH ZIPKIN:


            - Sleuth would assign an unique ID to a request, so that I can trace it across components.

            - Zipkin - is a distributed tracing system;

            - All the log from all these services we would put in MQ, we would use Rabbit MQ;

            - And we would send it out to the zipkin server where it is consolodated;

            - And we would able to look through the different requests and find what happened 
              with the specific request.


              <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-sleuth</artifactId>
              </dependency>


              - Then you need to tell what are requests you would want to intercept.


            - Spring Cloud Sleuth assigning an ID to the request and we can use that id to trace
              the request across multiple components.
            - We are able to see the same request, which is present on the API gateway server - ZUUL API,
              CurrencyExchangeService and CurrencyConversionService.

            => We want to send all these messages to one place., and we want to be able to see
               all this stuf in a centralized dashboard.


CENTRALIZED LOG:

          - What we would need to do for centralize log from all microservices:

            - Zipkin distributed tracing server to get a consolidated view of what is 
              happening across all the microservices.

            - We will get all the log messages from the individual  microservice tot go to the
              Zipkin distributed and after that we would use the UI which is provvided by
              Zipkin to look at what happened for a specific request.

            - We will use RabbitMQ, whenever there is a log message the microservice would put it
              on the queue and Zipkin  woukd be picked it up from the queue.

            => All the microservices will put the log messages on the RabbitMQ and 
              Zipkin Distributed Tracing Server  would be listening on it and will be pulling out
              the log messages from the MQ.

            - Typically this distributed tracing server is connected to a database.

            => What would happen:

            -  When I fire a request, the request would hit multiple microservices right.
            -  For example - if I calling the CurrencyCalculationService, the CurrencyCalculationService 
               in turn would invoke the CurrencyExchangeService and what would happen is the API gateway
               would be intercepting that. So the request would go through the currency calculation service,
               the API gateway  and the CurrencyExchangeService, the Spring Cloud Sleuth we'll be 
               assigning an unique ID for the request which I can use it to trace the request across 
               multiple applications or multiple components all the microservices would put all their 
               log messages on the queue as well into RabbitMQ and I would be able to track them on the 
               Zipkin Distributed Server.


              - Download Zipkin-server JAR and  execute command: 
                  
                    java -jar zipkin.jar

                    http://localhost:9411/zipkin/    - in web interface



          RABBIT_URI=amqp://localhost java -jar zipkin-server-2.20.2-exec.jar

              - Starting Zipkin with MQ

INSTALLING RABBIT MQ:

          Install the rabbitmq-server package:

              sudo apt-get install rabbitmq-server

              Step 4: Start the Server

              sudo systemctl start rabbitmq-server.service
              sudo systemctl enable rabbitmq-server.service

              You can check the status of RabbitMQ:

              sudo rabbitmqctl status


CONNECTING MICROSERVICES TO ZIPKIN:


              <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-sleuth-zipkin</artifactId>
              </dependency>
              
              <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-bus-amqp</artifactId>
              </dependency>


      - So, if you click to the currency-exchange-service , you can see te path, what is the response
        status code from where the request was fired and all that kinf of stuff.


      - For all applications involved in the chain , you can click it and find more details of what has
        happened with the request in the chain.


SPRING CLOUD BUS:


    - Even though we committed the change to the Git Repository, we're not seeing
      the changes in the Limits Service.

      Turn off the Security in Actuator:

        management.security.enabled=false   (limits-service.properties)

        How to make the changes reflect:

          - by calling the REFRESH URI:

                http://localhost:8080/application/refresh     -  POST-request

                  - this is returning the new values that are being picked up.


        So, if we  have a hundred instances, to refresh the configuration from teh Git-repository,
        we need to invoke 100 URLs

        => Spring Cloud Bus  provides a solution:

          - We can have one URL for all insances and once you hit that URL,
            al the instances of the microservices would be updated with the latest values from the Git-repository



          <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bus-amqp</artifactId>
          </dependency>


          - in config-server and limits-service
          - management.security.enabled=false   in the limits-service

          - And the we can send a POST-request to http://localhost:8080/bus/refresh

          or 

          -  http://localhost:8080/actuator/bus-refresh



          - This will refresh teh configuration for all the instances of microservice

          - All this magic is happening because of something called Spring Cloud Bus.

          - In this specifiv instance we are running the Spring Cloud Bus over RabbitMQ.

          - The way the SCB works is at application starts up, all the microservice
            instances register with the Cloud Bus.

          - So, if Limits Service has three different instances,all of them register with the bus.

          - When there is any changes in configuration, when the refresh is called to any of the instances,
            the microservice instance woukd send an event over to the Spring Cloud Bus.

          - And the SCB would propagate that event to all the microservice instances that are registred with it.

          - That's how all of the instances would upgrade it's configuration from the Spring Cloud Config Server.


          - Think about the Spring Boot is as soon as we add in the right dependencies, everything is
            auto-configured for us.

          - We have RabbitMQ running in the background, Spring Boot detects that and it sees that 
            there is an qmoq dependency in the class path, it would automatically configure a connection to
            RabbitMQ.



FAULT TOLERANCE WITH HYSTRIX:




        


